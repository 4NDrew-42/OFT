/**
 * Intelligent Chat Component
 * Replicates ORION-CORE's Intelligent Chat system with mobile optimization
 * Features: Gemini 2.5 Flash, RAG integration, conversation memory
 */

'use client';

import React, { useState, useRef, useEffect } from 'react';
import { Send, Brain, Database, Cpu, Zap, Clock, Sparkles, History, Trash2 } from 'lucide-react';
import { GlassPanel, GlassButton, GlassInput, GlassCard, StatusIndicator, NebulaBackground } from '@/components/ui/glass-components';
import { cn } from '@/lib/utils';

// Types
interface ChatMessage {
  id: string;
  type: 'user' | 'assistant';
  content: string;
  timestamp: number;
  sources?: RAGSource[];
  metadata?: ChatMetadata;
}

interface RAGSource {
  id: string;
  content: string;
  category: string;
  relevance: number;
  source: string;
}

interface ChatMetadata {
  tokens: number;
  confidence: number;
  processingTime: number;
  ragMemoriesUsed: number;
  provider: string;
}

interface ChatSession {
  sessionId: string;
  messageCount: number;
  conversationMemory: boolean;
  createdAt: string;
}

type ChatProvider = 'gemini' | 'deepseek';

// Main Intelligent Chat Component
export const IntelligentChat: React.FC = () => {
  const [messages, setMessages] = useState<ChatMessage[]>([]);
  const [inputValue, setInputValue] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [currentProvider, setCurrentProvider] = useState<ChatProvider>('gemini');
  const [session, setSession] = useState<ChatSession | null>(null);
  const [showMetadata, setShowMetadata] = useState(false);
  const [systemStatus, setSystemStatus] = useState<'connecting' | 'online' | 'error'>('connecting');
  
  const messagesEndRef = useRef<HTMLDivElement>(null);
  const inputRef = useRef<HTMLInputElement>(null);

  // Auto-scroll to bottom
  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  }, [messages]);

  // Initialize session
  useEffect(() => {
    initializeSession();
  }, []);

  const initializeSession = async () => {
    try {
      // TODO: Replace with actual API call
      const mockSession: ChatSession = {
        sessionId: `session_${Date.now()}`,
        messageCount: 0,
        conversationMemory: true,
        createdAt: new Date().toISOString()
      };
      setSession(mockSession);
      setSystemStatus('online');
    } catch (error) {
      console.error('Failed to initialize session:', error);
      setSystemStatus('error');
    }
  };

  const sendMessage = async () => {
    if (!inputValue.trim() || isLoading || !session) return;

    const userMessage: ChatMessage = {
      id: `msg_${Date.now()}`,
      type: 'user',
      content: inputValue.trim(),
      timestamp: Date.now()
    };

    setMessages(prev => [...prev, userMessage]);
    setInputValue('');
    setIsLoading(true);

    try {
      // TODO: Replace with actual API call to /api/intelligent-chat
      const mockResponse = await simulateIntelligentChat(userMessage.content);
      
      const assistantMessage: ChatMessage = {
        id: `msg_${Date.now() + 1}`,
        type: 'assistant',
        content: mockResponse.response,
        timestamp: Date.now(),
        sources: mockResponse.sources,
        metadata: mockResponse.metadata
      };

      setMessages(prev => [...prev, assistantMessage]);
    } catch (error) {
      console.error('Chat error:', error);
      const errorMessage: ChatMessage = {
        id: `msg_${Date.now() + 1}`,
        type: 'assistant',
        content: 'Sorry, I encountered an error. Please try again.',
        timestamp: Date.now()
      };
      setMessages(prev => [...prev, errorMessage]);
    } finally {
      setIsLoading(false);
    }
  };

  // Mock intelligent chat response (replace with actual API)
  const simulateIntelligentChat = async (query: string): Promise<{
    response: string;
    sources: RAGSource[];
    metadata: ChatMetadata;
  }> => {
    // Simulate API delay
    await new Promise(resolve => setTimeout(resolve, 1500));

    return {
      response: `I understand you're asking about "${query}". Based on my analysis of the ORION-CORE documentation and 245 memories across 20 categories, here's what I can tell you:\n\nThis is a sophisticated response that would normally be generated by Gemini 2.5 Flash with RAG context from the ORION-CORE knowledge base. The system would search through hardware specifications, service configurations, troubleshooting guides, and operational procedures to provide you with the most relevant and accurate information.\n\nWould you like me to elaborate on any specific aspect?`,
      sources: [
        {
          id: 'mem_001',
          content: 'ORION-CORE hardware specifications and network topology...',
          category: 'Hardware',
          relevance: 0.92,
          source: 'ORION-CORE Documentation'
        },
        {
          id: 'mem_002', 
          content: 'Service configuration and deployment procedures...',
          category: 'Services',
          relevance: 0.87,
          source: 'Operations Manual'
        }
      ],
      metadata: {
        tokens: 156,
        confidence: 0.94,
        processingTime: 1.2,
        ragMemoriesUsed: 8,
        provider: currentProvider
      }
    };
  };

  const clearChat = () => {
    setMessages([]);
    if (session) {
      setSession({
        ...session,
        messageCount: 0
      });
    }
  };

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      sendMessage();
    }
  };

  return (
    <NebulaBackground variant="chat" className="p-4">
      <div className="max-w-4xl mx-auto h-screen flex flex-col">
        {/* Header */}
        <GlassPanel variant="nav" className="mb-4 p-4">
          <div className="flex justify-between items-center mb-2">
            <div className="flex items-center gap-2">
              <Sparkles className="w-6 h-6 text-blue-400" />
              <h1 className="text-xl font-bold text-white">ORION Intelligent Chat</h1>
              <span className="px-2 py-1 text-xs bg-blue-500/20 text-blue-300 border border-blue-500/30 rounded-full">
                Gemini 2.5
              </span>
              <StatusIndicator
                status={systemStatus === 'connecting' ? 'loading' : systemStatus}
                label={systemStatus === 'online' ? 'Connected' : systemStatus === 'connecting' ? 'Connecting' : 'Error'}
              />
            </div>
            
            <div className="flex items-center gap-2">
              <GlassButton
                variant="ghost"
                size="sm"
                onClick={() => setShowMetadata(!showMetadata)}
                title="Toggle metadata"
              >
                Show Details
              </GlassButton>
              <GlassButton
                variant="ghost"
                size="sm"
                onClick={clearChat}
                title="Clear chat"
              >
                <Trash2 className="w-4 h-4" />
                Clear
              </GlassButton>
            </div>
          </div>

          {/* Metadata Row */}
          <div className="flex items-center justify-between text-sm text-white/70">
            <div className="flex items-center gap-4">
              <span className="flex items-center gap-1">
                <Brain className="w-4 h-4" />
                Messages: {messages.length}
              </span>
              <span className="flex items-center gap-1">
                <Database className="w-4 h-4" />
                Session: {session?.sessionId.slice(-8) || 'Loading...'}
              </span>
            </div>
            <div className="text-xs">
              Powered by ORION-CORE Intelligent Orchestrator
            </div>
          </div>
        </GlassPanel>

        {/* Messages Area */}
        <GlassPanel className="flex-1 overflow-hidden mb-4">
          <div className="h-full overflow-y-auto p-4 space-y-4">
            {messages.length === 0 ? (
              <div className="text-center text-white/60 mt-8">
                <Sparkles className="w-16 h-16 mx-auto mb-4 text-blue-400" />
                <h3 className="text-lg font-semibold mb-2 text-white">ORION Intelligent Chat</h3>
                <p className="mb-2">Claude-like AI assistant with sophisticated reasoning</p>
                <div className="text-sm space-y-1">
                  <p>ðŸ§  Powered by Gemini 2.5 Flash</p>
                  <p>ðŸ“š Access to 245 ORION-CORE memories</p>
                  <p>ðŸ’¬ Long-term conversation memory</p>
                  <p>ðŸ”§ Intelligent tool integration</p>
                  <p>âš¡ Real-time RAG with source attribution</p>
                </div>
              </div>
            ) : (
              messages.map((message) => (
                <MessageBubble
                  key={message.id}
                  message={message}
                  showMetadata={showMetadata}
                />
              ))
            )}
            
            {isLoading && (
              <div className="flex items-center gap-2 text-white/60">
                <div className="w-2 h-2 bg-blue-400 rounded-full animate-pulse" />
                <span className="text-sm">Thinking...</span>
              </div>
            )}
            
            <div ref={messagesEndRef} />
          </div>
        </GlassPanel>

        {/* Input Area */}
        <GlassPanel className="p-4">
          <div className="flex items-center gap-2">
            <GlassInput
              ref={inputRef}
              variant="chat"
              value={inputValue}
              onChange={(e) => setInputValue(e.target.value)}
              onKeyPress={handleKeyPress}
              placeholder={systemStatus === 'online' ? 'Ask me anything about ORION-CORE...' : 'Connecting...'}
              disabled={isLoading || systemStatus !== 'online'}
              className="flex-1"
            />
            <GlassButton
              onClick={sendMessage}
              disabled={!inputValue.trim() || isLoading || systemStatus !== 'online'}
              size="md"
              variant="primary"
              title="Send message"
            >
              <Send className="w-5 h-5" />
            </GlassButton>
          </div>
        </GlassPanel>
      </div>
    </NebulaBackground>
  );
};

// Message Bubble Component
interface MessageBubbleProps {
  message: ChatMessage;
  showMetadata: boolean;
}

const MessageBubble: React.FC<MessageBubbleProps> = ({ message, showMetadata }) => {
  const isUser = message.type === 'user';
  
  return (
    <div className={cn('flex', isUser ? 'justify-end' : 'justify-start')}>
      <div className={cn('max-w-[80%]', isUser ? 'ml-12' : 'mr-12')}>
        <GlassCard
          variant={isUser ? 'default' : 'elevated'}
          className={cn(
            isUser 
              ? 'bg-blue-500/20 border-blue-400/30' 
              : 'bg-white/5 border-white/10'
          )}
        >
          <div className="whitespace-pre-wrap text-white text-sm leading-relaxed">
            {message.content}
          </div>
          
          {/* Sources */}
          {message.sources && message.sources.length > 0 && (
            <div className="mt-3 pt-3 border-t border-white/10">
              <div className="text-xs text-white/60 mb-2">Sources:</div>
              <div className="space-y-1">
                {message.sources.map((source) => (
                  <div key={source.id} className="text-xs text-white/50 bg-white/5 rounded p-2">
                    <div className="font-medium">{source.category}</div>
                    <div className="truncate">{source.content}</div>
                    <div className="text-white/40">Relevance: {(source.relevance * 100).toFixed(0)}%</div>
                  </div>
                ))}
              </div>
            </div>
          )}
          
          {/* Metadata */}
          {showMetadata && message.metadata && (
            <div className="mt-3 pt-3 border-t border-white/10 grid grid-cols-2 gap-2 text-xs text-white/60">
              <div className="flex items-center gap-1">
                <Cpu className="w-3 h-3" />
                Tokens: {message.metadata.tokens}
              </div>
              <div className="flex items-center gap-1">
                <Zap className="w-3 h-3" />
                Confidence: {(message.metadata.confidence * 100).toFixed(0)}%
              </div>
              <div className="flex items-center gap-1">
                <Clock className="w-3 h-3" />
                Time: {message.metadata.processingTime}s
              </div>
              <div className="flex items-center gap-1">
                <Database className="w-3 h-3" />
                RAG: {message.metadata.ragMemoriesUsed}
              </div>
            </div>
          )}
          
          <div className="mt-2 text-xs text-white/40">
            {new Date(message.timestamp).toLocaleTimeString()}
          </div>
        </GlassCard>
      </div>
    </div>
  );
};

export default IntelligentChat;
